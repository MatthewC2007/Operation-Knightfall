import json
from kivy.uix.widget import Widget
from kivy.app import App
from kivy.uix.behaviors import DragBehavior
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.core.window import Window
from kivy.config import Config
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.properties import StringProperty
from kivy.uix.textinput import TextInput
from kivy.uix.boxlayout import BoxLayout
import os
Window.maximize()
kv="""<DraggableRectangle@DragBehavior+FloatLayout>:
    size_hint: None, None
    size: 200, 220
    drag_timeout: 100000000
    drag_distance: 0
    drag_rectangle: self.x, self.y, self.width, self.height

    canvas.before:
        Color:
            rgba: 0.6, 0.5, 0.1, 0.8 
        Rectangle:
            pos: self.x + 3, self.y - 3
            size: self.size
    canvas:
        Color:
            rgba: 1, 1, 0.5, 1  
        Rectangle:
            pos: self.pos
            size: self.size

    BoxLayout:
        orientation: 'vertical'
        size: root.size
        pos: root.pos
        padding: 10
        spacing: 5

        TextInput:
            id: text_input
            hint_text: "Type your note here..."
            size_hint_y: 0.7
            multiline: True

        BoxLayout:
            size_hint_y: 0.3
            spacing: 10

            Button:
                id: note_save
                text: "Save"
                on_release: root.save_note()

            Button:
                id: note_delete
                text: "Delete"
                on_release: root.delete_note()
    

<WelcomeScreen>:
    FloatLayout:
        Label:
            text: "Welcome to the App"
            font_size: self.size[1] * 0.5
            size_hint: None, None
            size: 100, 100
            pos_hint: {"center_x": 0.5, "center_y": 0.6}
        Button:
            background_color: "cyan"
            text: "Enter"
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.1
            pos_hint: {"center_x": 0.5, "center_y": 0.4}
            on_release: app.switch_to_main_screen()
        
<MainScreen>:

    
    FloatLayout:
        Button:
            text: 'New Note'
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.05
            pos_hint: {"x": 0.02, "y": 0.12}
            on_release: app.add_new_rectangle()
        Button:
            text: 'Settings'
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.05
            pos_hint: {"x": 0.02, "y": 0.05}
            on_release: app.switch_to_settings()
        Label:
            text: "Music Player"
            font_size: 20
            size_hint: 0.13, 0.05
            pos_hint: {"x": 0.7, "y": 0.3}
            
        

        
<Settings>:
    FloatLayout:
        canvas:
            Color:
                rgba: 1, 1, 1, 0.6  
            Rectangle:
                pos: self.pos
                size: self.size
            
        Label:
            text: "Settings"
            font_size: 32
            size_hint: 0.13, 0.05
            pos_hint: {"center_x": 0.5, "top": 1}
        Button:
            text: "Back to Main"
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.05
            pos_hint: {"x": 0.02, "y": 0.05}
            on_release: app.switch_to_main_screen()
                """


Builder.load_string(kv)
Config.set('input', 'mouse', 'mouse,disable_multitouch')

class WelcomeScreen(Screen):
    pass
class MainScreen(Screen):
    pass
class Settings(Screen):
    pass

class DraggableRectangle(DragBehavior, FloatLayout):
    dragging_widget = None

    def __init__(self, note_id=None, **kwargs):
        super().__init__(**kwargs)
        self.note_id = note_id or "note_temp"
        self.load_note()

    def on_touch_down(self, touch): 
        if self.collide_point(*touch.pos):
            for child in self.children:
                if child.collide_point(*touch.pos):
                    DraggableRectangle.dragging_widget = self
                    return super().on_touch_down(touch)
        return super().on_touch_down(touch)

    def on_touch_move(self, touch):
        if DraggableRectangle.dragging_widget is self:
            new_x = self.x + touch.dx
            new_y = self.y + touch.dy

            if new_x < 0:
                new_x = 0
            if new_y < 0:
                new_y = 0
            if new_x + self.width > Window.width:
                new_x = Window.width - self.width
            if new_y + self.height > Window.height:
                new_y = Window.height - self.height

            self.pos = (new_x, new_y)
            return True
        return super().on_touch_move(touch)

    def on_touch_up(self, touch):
        if DraggableRectangle.dragging_widget is self:
            DraggableRectangle.dragging_widget = None
        return super().on_touch_up(touch)

    def save_note(self):
        note_content = self.ids.text_input.text
        with open(f'note_{self.note_id}.json', 'w', encoding="utf-8") as f:
            json.dump({"note": note_content}, f)

    def load_note(self):
        try:
            with open(f'note_{self.note_id}.json', 'r', encoding="utf-8") as f:
                data = json.load(f)
                self.ids.text_input.text = data.get("note", "")
        except FileNotFoundError:
            self.ids.text_input.text = ""

    def delete_note(self):
        try:
            os.remove(f'note_{self.note_id}.json')
        except FileNotFoundError:
            pass
        self.parent.remove_widget(self)


   

class MainApp(App):
    def build(self):
        """Build the app."""
        self.rectangles = {}
        
        self.sm = ScreenManager()
        self.sm.add_widget(WelcomeScreen(name="welcome"))
        self.sm.add_widget(MainScreen(name="main"))
        self.sm.add_widget(Settings(name="setting"))
        self.load_all_position() 
        return self.sm
        
    def save_all_positions(self):
        """Save all rectangle positions to a file."""
        with open("rectangles.json", "w") as f:
            json.dump(self.rectangles, f)

    def load_all_position(self):
        """Load all rectangle positions from a file."""
        try:
            with open("rectangles.json", "r") as f:
                self.rectangles = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.rectangles = {}

        # Recreate rectangles from the loaded positions
        main_screen = self.sm.get_screen("main")
        
        layout = FloatLayout()
        main_screen.add_widget(layout)
    
        for rect_id, pos in self.rectangles.items():
            new_rectangle = DraggableRectangle()
            new_rectangle.size_hint = (0.1, 0.2)
            new_rectangle.pos = (pos["x"], pos["y"])
            new_rectangle.bind(pos=lambda instance,
                value: self.update_rectangle_position(rect_id, instance.pos))
            layout.add_widget(new_rectangle)

    def switch_to_main_screen(self):
        """Switch to the main screen."""
        self.sm.current = "main"

    def switch_to_settings(self):
        """Switch to the settings screen."""
        self.sm.current = "setting"

    def add_new_rectangle(self):
        main_screen = self.sm.get_screen("main")
        layout = main_screen.children[0]

        rect_id = f"rect{len(self.rectangles) + 1}"
        new_rectangle = DraggableRectangle(note_id=rect_id)
        new_rectangle.size_hint = (0.1, 0.2)
        new_rectangle.pos = (100, 100)

        self.rectangles[rect_id] = {"x": 100, "y": 100}
        new_rectangle.bind(pos=lambda instance, value: self.update_rectangle_position(rect_id, instance.pos))
        layout.add_widget(new_rectangle)
        self.save_all_positions()


    def update_rectangle_position(self, rect_id, position):
        """Update the position of a rectangle in the dictionary and save."""
        self.rectangles[rect_id] = {"x": position[0], "y": position[1]}
        self.save_all_positions()



if __name__ == '__main__':
    MainApp().run()