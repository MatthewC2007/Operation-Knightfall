import json
from kivy.uix.widget import Widget
from kivy.app import App
from kivy.uix.behaviors import DragBehavior
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.core.window import Window
from kivy.config import Config
from kivy.uix.floatlayout import FloatLayout
Window.maximize()

Builder.load_file('initialisation.kv')
Config.set('input', 'mouse', 'mouse,disable_multitouch')

class WelcomeScreen(Screen):
    pass
class MainScreen(Screen):
    pass
class Settings(Screen):
    pass
class DraggableRectangle(DragBehavior, Widget):
    dragging_widget = None
    
    def on_touch_down(self, touch): #DOES NOT WORK ATM
        if self.collide_point(*touch.pos):
            DraggableRectangle.dragging_widget = self
            return super().on_touch_move(touch)
        return False
    
    def on_touch_move(self, touch):
        if DraggableRectangle.dragging_widget is self:
            new_x = self.x + touch.dx
            new_y = self.y + touch.dy

            if new_x < 0:
                new_x = 0
            if new_y < 0:
                new_y = 0
            if new_x + self.width > Window.width:
                new_x = Window.width - self.width
            if new_y + self.height > Window.height:
                new_y = Window.height - self.height

            self.pos = (new_x, new_y)
            return True
        return False
    
    def on_touch_up(self, touch):
        if DraggableRectangle.dragging_widget is self:
            DraggableRectangle.dragging_widget = None
        return super().on_touch_up(touch)
    pass

class MainApp(App):
    def build(self):
        """Build the app."""
        self.rectangles = {}
        
        self.sm = ScreenManager()
        self.sm.add_widget(WelcomeScreen(name="welcome"))
        self.sm.add_widget(MainScreen(name="main"))
        self.sm.add_widget(Settings(name="setting"))
        self.load_all_position() 
        return self.sm
        
    def save_all_positions(self):
        """Save all rectangle positions to a file."""
        with open("rectangles.json", "w") as f:
            json.dump(self.rectangles, f)

    def load_all_position(self):
        """Load all rectangle positions from a file."""
        try:
            with open("rectangles.json", "r") as f:
                self.rectangles = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.rectangles = {}

        # Recreate rectangles from the loaded positions
        main_screen = self.sm.get_screen("main")
        
        layout = FloatLayout()
        main_screen.add_widget(layout)
    
        for rect_id, pos in self.rectangles.items():
            new_rectangle = DraggableRectangle()
            new_rectangle.size_hint = (0.1, 0.2)
            new_rectangle.pos = (pos["x"], pos["y"])
            new_rectangle.bind(pos=lambda instance,
                value: self.update_rectangle_position(rect_id, instance.pos))
            layout.add_widget(new_rectangle)

    def switch_to_main_screen(self):
        """Switch to the main screen."""
        self.sm.current = "main"

    def switch_to_settings(self):
        """Switch to the settings screen."""
        self.sm.current = "setting"

    def add_new_rectangle(self):
        """Add a new draggable rectangle to the main screen."""
        main_screen = self.sm.get_screen("main")
        layout = main_screen.children[0]  # Access the FloatLayout directly

        new_rectangle = DraggableRectangle()
        new_rectangle.size_hint = (0.1, 0.2)
        new_rectangle.pos = (100, 100)

        rect_id = f"rect{len(self.rectangles) + 1}"
        self.rectangles[rect_id] = {"x": 100, "y": 100}
        new_rectangle.bind(pos=lambda instance,
                            value: self.update_rectangle_position(rect_id,
                                                                instance.pos))
        layout.add_widget(new_rectangle)

    def update_rectangle_position(self, rect_id, position):
        """Update the position of a rectangle in the dictionary and save."""
        self.rectangles[rect_id] = {"x": position[0], "y": position[1]}
        self.save_all_positions()

if __name__ == '__main__':
    MainApp().run()