import json
from kivy.uix.widget import Widget
from kivy.app import App
from kivy.uix.behaviors import DragBehavior
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.core.window import Window
from kivy.config import Config
from kivy.uix.floatlayout import FloatLayout
from kivy.properties import ObjectProperty, StringProperty
from kivy.uix.progressbar import ProgressBar
from kivy.core.audio import SoundLoader
from kivy.clock import Clock
import os
import uuid
import glob
Window.maximize()
kv="""<DraggableRectangle@DragBehavior+FloatLayout>:
    size_hint: None, None
    size: 250, 300
    drag_timeout: 100000000
    drag_distance: 0
    drag_rectangle: self.x, self.y, self.width, self.height

    canvas.before:
        Color:
            rgba: 0.6, 0.5, 0.1, 0.8 
        Rectangle:
            pos: self.x + 3, self.y - 3
            size: self.size
    canvas:
        Color:
            rgba: 1, 1, 0.5, 1  
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        orientation: 'vertical'
        size: root.size
        pos: root.pos
        padding: 10
        spacing: 5

        TextInput:
            id: text_input
            hint_text: "Type your note here..."
            size_hint_y: 0.8
            multiline: True
            on_parent: root.text_input_ref = self
        BoxLayout:
            size_hint_y: 0.2
            spacing: 20
            Button:
                id: note_save
                text: "Save"
                on_release: root.save_note()
            Button:
                id: note_delete
                text: "Delete"
                on_release: root.delete_note()

<Draggablemusicplayer@DragBehavior+FloatLayout>:
    size_hint: None, None
    size: 320, 360
    drag_timeout: 100000000
    drag_distance: 0
    drag_rectangle: self.x, self.y, self.width, self.height
    
    canvas.before:
        Color:
            rgba: 0, 0.6, 1, 1  
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        orientation: 'vertical'
        size: root.size
        pos: root.pos
        padding: 10
        spacing: 5
        Label:
            text: "Song name.filetype"
            size_hint_y: 0.1
            size_hint_x: 0.8
            pos_hint: {"center_x": 0.5}
            font_size: self.size[1] * 0.3
        ProgressBar:
            id: progress_bar
            size_hint_y: 0.1
            size_hint_x: 0.9
            pos_hint: {"center_x": 0.5}
            max: 100
            value: 0
        GridLayout:
            cols: 4
            size_hint_y: 0.08
            padding: 10
            spacing: 5
            Button:
                text: "Back"
                size_hint_y: 0.08
                on_release: root.play_prev()
            Button:
                text: "Play"
                size_hint_y: 0.08
                on_release: root.play_current()
            Button:
                text: "Pause"
                size_hint_y: 0.08
                on_release: root.sound.stop() if root.sound else None
            Button:
                text:"Skip"
                size_hint_y: 0.08
                on_release: root.play_next()
                
<WelcomeScreen>:
    FloatLayout:
        Label:
            text: "Welcome to the App"
            font_size: self.size[1] * 0.5
            size_hint: None, None
            size: 100, 100
            pos_hint: {"center_x": 0.5, "center_y": 0.6}
        Button:
            background_color: "cyan"
            text: "Enter"
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.1
            pos_hint: {"center_x": 0.5, "center_y": 0.4}
            on_release: app.switch_to_main_screen()        
<MainScreen>:  
    FloatLayout:
        Button:
            text: 'New Note'
            font_size: self.size[1] * 0.5
            size_hint: 0.13, 0.05
            pos_hint: {"x": 0.02, "y": 0.05}
            on_release: app.add_new_rectangle()
                """

Builder.load_string(kv)
Config.set('input', 'mouse', 'mouse,disable_multitouch')
class WelcomeScreen(Screen):
    pass
class MainScreen(Screen):
    pass
class Settings(Screen):
    pass

class DraggableRectangle(DragBehavior, FloatLayout):
    dragging_widget = None
    text_input_ref = ObjectProperty(None)
    note_id = StringProperty("note_temp")

    def __init__(self, note_id="note_temp", **kwargs):
        super().__init__(**kwargs)
        self.note_id = note_id
        self.size_hint = (None, None)
        self.size = (250, 300)
        
        Clock.schedule_once(self.load_note, 0.1) 

    def on_touch_down(self, touch): 
        if self.collide_point(*touch.pos):
            for child in self.children:
                if child.collide_point(*touch.pos):
                    DraggableRectangle.dragging_widget = self
                    # Bring this widget to front by removing and re-adding it
                    if self.parent:
                        parent = self.parent
                        parent.remove_widget(self)
                        parent.add_widget(self)
                    return super().on_touch_down(touch)
        return super().on_touch_down(touch)

    def on_touch_up(self, touch):
        if DraggableRectangle.dragging_widget is self:
            DraggableRectangle.dragging_widget = None
        return super().on_touch_up(touch)

    def save_note(self):
        if self.text_input_ref:
            note_content = self.text_input_ref.text
            with open(f'Notes/note_{self.note_id}.json', 'w',
                       encoding="utf-8") as f:
                json.dump({"note": note_content}, f)

    def load_note(self, dt=None):
        try:
            with open(f'Notes/note_{self.note_id}.json', 'r',
                       encoding="utf-8") as f:
                data = json.load(f)
                if self.text_input_ref:
                    self.text_input_ref.text = data.get("note", "")
        except FileNotFoundError:
            if self.text_input_ref:
                self.text_input_ref.text = ""

    def delete_note(self):
        # Remove the saved note file
        try:
            os.remove(f'Notes/note_{self.note_id}.json')
        except FileNotFoundError:
            pass

        # Inform the main app to remove from position tracking
        app = App.get_running_app()
        if self.note_id in app.rectangles:
            del app.rectangles[self.note_id]
            app.save_all_positions()

        # Remove the widget from the screen
        if self.parent:
            self.parent.remove_widget(self)

class Draggablemusicplayer(DragBehavior, FloatLayout):
    dragging_widget = None
    sound = None
    current_file_index = 0
    current_song = StringProperty("No song loaded")

    def play_music(self, file_path):
        if self.sound:
            self.sound.stop()
        self.sound = SoundLoader.load(file_path)
        if self.sound:
            self.sound.play()
            self.current_song = os.path.basename(file_path)

    def play_next(self):
        app = App.get_running_app()
        files = app.get_music_files()
        if files:
            self.current_file_index = (self.current_file_index + 1) % len(files)
            self.play_music(files[self.current_file_index])

    def play_prev(self):
        app = App.get_running_app()
        files = app.get_music_files()
        if files:
            self.current_file_index = (self.current_file_index - 1) % len(files)
            self.play_music(files[self.current_file_index])

    def play_current(self):
        app = App.get_running_app()
        files = app.get_music_files()
        if files:
            self.play_music(files[self.current_file_index])

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            Draggablemusicplayer.dragging_widget = self
            # Bring this widget to front by removing and re-adding it
            if self.parent:
                parent = self.parent
                parent.remove_widget(self)
                parent.add_widget(self)
            return super().on_touch_down(touch)
        return super().on_touch_down(touch)

    def on_touch_up(self, touch):
        if Draggablemusicplayer.dragging_widget is self:
            Draggablemusicplayer.dragging_widget = None
        return super().on_touch_up(touch)

class MainApp(App):
    def build(self):
        """Build the app."""
        self.rectangles = {}
        self.music_player = {}  # for position saving
        self.music_player_widget = None  # optional reference
        self.sm = ScreenManager()
        self.sm.add_widget(WelcomeScreen(name="welcome"))
        self.sm.add_widget(MainScreen(name="main"))
        self.load_all_position() 
        return self.sm
        
    def save_all_positions(self):

        with open("rectangles.json", "w") as f:
            json.dump(self.rectangles, f)

        with open("music.json", "w") as f:
            json.dump(self.music_player, f)

    def load_all_position(self):
        try:
            with open("rectangles.json", "r") as f:
                self.rectangles = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.rectangles = {}

        try:
            with open("music.json", "r") as f:
                self.music_player = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.music_player = {}

        main_screen = self.sm.get_screen("main")
        layout = FloatLayout()
        main_screen.add_widget(layout)
    
        for rect_id, pos in self.rectangles.items():
            new_rectangle = DraggableRectangle(note_id=rect_id)
            new_rectangle.size_hint = (None, None)
            new_rectangle.size = (250, 300)  # default size
            new_rectangle.pos = (pos["x"], pos["y"])
            new_rectangle.bind(pos=lambda instance,
                value: self.update_rectangle_pos(rect_id, instance.pos))
            layout.add_widget(new_rectangle)

        # Load persistent music player
        pos = self.music_player.get("music_player", {"x": 1440, "y": 20})  # default position
        music_player = Draggablemusicplayer()
        music_player.size_hint = (None, None)
        music_player.size = (320, 250)
        music_player.pos = (pos["x"], pos["y"])
        music_player.bind(pos=lambda instance,
                           value: self.update_musicplayer_pos(instance.pos))
        layout.add_widget(music_player)
        self.music_player_widget = music_player  # store a reference if needed

    def switch_to_main_screen(self):
        """Switch to the main screen."""
        self.sm.current = "main"

    def switch_to_settings(self):
        """Switch to the settings screen."""
        self.sm.current = "setting"

    def add_new_rectangle(self):
        main_screen = self.sm.get_screen("main")
        layout = main_screen.children[0]

        rect_id = str(uuid.uuid4())
        new_rectangle = DraggableRectangle(note_id=rect_id)
        new_rectangle.size_hint = (None, None)
        new_rectangle.size = (250, 300)
        new_rectangle.pos = (100, 100)

        self.rectangles[rect_id] = {"x": 100, "y": 100}
        new_rectangle.bind(pos=lambda instance,
                        value: self.update_rectangle_pos(rect_id, instance.pos))
        layout.add_widget(new_rectangle)
        self.save_all_positions()

    def update_rectangle_pos(self, rect_id, position):
        """Update the position of a rectangle in the dictionary and save."""
        self.rectangles[rect_id] = {"x": position[0], "y": position[1]}
        self.save_all_positions()

    def update_musicplayer_pos(self, pos):
        """Update the position of the music player in the dictionary and save."""
        self.music_player["music_player"] = {"x": pos[0], "y": pos[1]}
        with open("music.json", "w") as f:
                json.dump(self.music_player, f)

    def get_music_files(self):
        """Return a list of audio file paths in the Music folder."""
        music_dir = os.path.join(os.getcwd(), "Music")
        if not os.path.exists(music_dir):
            os.makedirs(music_dir)
        # You can add more extensions if needed
        files = glob.glob(os.path.join(music_dir, "*.mp3")) + \
                glob.glob(os.path.join(music_dir, "*.wav")) + \
                glob.glob(os.path.join(music_dir, "*.ogg"))
        return files

if __name__ == '__main__':
    MainApp().run()